const bufferSize := 1024

procedure main(argc, argv[]) do
    shared queue := createQueue()

    shared can_access_queue := createSemaphore(1)
    shared canConsume := createSemaphore(0)
    shared canProduce := createSemaphore(bufferSize)
    createThreas(interger(argv[1]), produce)
    createThread(integer(argv[2]), consume)
end

procedure produce() do
    while (true) do
        wait(canProduce)
        declare product := createProduct()
        lock(can_access_queue)
        enqueue(buffer, product)
        unlock(can_access_queue)
        signal(canConsume)
    end
end

procedure consume() do
    declare counter := 0
    while (true) do
        wait(canConsume)
        lock(can_access_queue)
        declare product := dequeue(queue)
        unlock(can_access_queue)
        consumeProduct(product)
        signal(canProduce)
     end
end